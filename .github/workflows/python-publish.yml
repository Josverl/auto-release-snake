# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install tools
        run: |
          # install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv tool install poetry --quiet 
          uv venv .venv

      # bump version - but do not commit this yet
      - name: bump version.prerelease
        run: |
          source .venv/bin/activate
          poetry version prerelease
          poetry version --short > .version.txt
          echo "Bumped version to $(cat .version.txt)"

      - name: test
        run: |
          source .venv/bin/activate
          poetry install --with test
          pytest 


  bump-version:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install tools
        run: |
          # install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv tool install poetry --quiet 
          uv venv .venv

      # bump version and commit
      - name: bump version.prerelease
        run: |
          source .venv/bin/activate
          poetry version prerelease
          poetry version --short > .version.txt
          echo "Bumped version to $(cat .version.txt)"

      - name: Commit version bump
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout ${{ github.ref_name }}
          git add pyproject.toml 
          git commit -m "ci: bump version [skip ci]" || echo "No changes to commit"
          git push

  release-build:
    runs-on: ubuntu-latest
    needs:
      - bump-version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install tools
        run: |
          # install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv tool install poetry --quiet 
          uv venv .venv

      - name: bump version.prerelease
        run: |
          source .venv/bin/activate
          poetry version prerelease
          poetry version --short > .version.txt
          echo "Bumped version to $(cat .version.txt)"

      - name: test
        run: |
          source .venv/bin/activate
          poetry install --with test
          pytest 

      - name: Build release distributions
        run: |
          source .venv/bin/activate
          poetry build --format wheel

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
